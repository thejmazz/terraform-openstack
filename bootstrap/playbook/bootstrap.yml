---
- name: "Bootstrap Server On Ubuntu 16.04"

  # hosts: all
  hosts: type_openstack_compute_floatingip_associate_v2
  become: yes
  become_user: root

  # this is so that we can install python 2 via raw ssh
  gather_facts: false

  vars:
    services:
      - git
      - drone
      - minio
    # {git,drone}.domain.tld
    # Applies to web CSR, nginx, CoreDNS
    domain: domain
    tld: tld
    # Docker
    docker_version: "17.06.2"
    docker_compose_version: "1.21.2"
    # CoreDNS
    coredns_version: "1.2.0"
    # Root CA CSR
    rootca_csr_ca_common_name: "Bootstrap CA"
    rootca_csr_country: "Country"
    rootca_csr_city: "City"
    rootca_csr_organization: "Bootstrap Organization"
    rootca_csr_organization_unit: "Organization Unit"
    rootca_csr_state: "State"
    # Web CSR
    # Common name will be '*.domain.tld'
    web_csr_country: "Country"
    web_csr_city: "City"
    web_csr_organization: "Organization"
    web_csr_organization_unit: "Organization Unit"
    web_csr_state: "State"
    # Nginx
    web_cert_path: /etc/nginx/ssl/web.pem
    web_tls_key_path: /etc/nginx/ssl/web-key.pem
    # Gitea
    # md5 + $(echo password | md5sum)
    gitea_postgres_password: md5518cb1fc619543ab820c4f34649ecf2c
    gitea_port: 3000
    # Drone
    drone_version: 0.8.5
    drone_secret: mydronesecret
    drone_admin: admin
    drone_server_port: 8000
    drone_server_grpc_port: 9000
    # Minio
    minio_port: 9001
    # For convenience and terseness
    local_ipv4: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    # Depends on hostname actually being an IP
    floating_ip: "{{ inventory_hostname }}"

  handlers:
    - name: restart_nginx
      service:
        daemon_reload: yes
        name: nginx
        state: restarted
        enabled: yes
    - name: generate_web_certs
      shell: "source /etc/profile && cfssl gencert -ca=/etc/cfssl/ca.pem -ca-key=/etc/cfssl/ca-key.pem web.json | cfssljson -bare web"
      args:
        # creates: "{{ web_cert_path }}"
        chdir: /etc/nginx/ssl
        executable: /bin/bash
      notify: restart_nginx
    - name: restart_service_drone_server
      service:
        daemon_reload: yes
        name: drone-server
        state: restarted
        enabled: yes
    - name: restart_service_coredns
      service:
        daemon_reload: yes
        name: coredns
        state: restarted
        enabled: yes
    - name: restart_service_gitea
      service:
        daemon_reload: yes
        name: gitea
        state: restarted
        enabled: yes
    - name: reload_service_coredns
      service:
        daemon_reload: yes
        name: coredns
        state: reloaded
        enabled: yes

  pre_tasks:
    - name: "Install python 2 in case not available"
      raw: test -e /usr/bin/python || (apt -y update && apt install -y python-minimal)
      register: output
      changed_when: output.stdout != ""
    - name: Gathering facts
      setup:

      # will show changed every time. see: https://github.com/ansible/ansible/issues/27798
    - name: update apt cache
      apt: update_cache=yes

    - name: apt dist-upgrade
      apt: upgrade=dist
    - name: Disable unattended upgrades
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        line: APT::Periodic::Unattended-Upgrade "0";
        regexp: ^APT::Periodic::Unattended-Upgrade "1";$

  roles:
    - role: angstwad.docker_ubuntu
      docker_pkg_name: "docker-ce={{ docker_version }}*"
      docker_aufs_enabled: false
      daemon_json:
        storage-driver: overlay2
        dns: [ "{{ local_ipv4 }}" ]
        mtu: 1300
        # make a network with --opt com.docker.network.driver.mtu=1300 <name> (or anything lower than hosts interface of the default gateway)
        # network_mode: <name> (need to enable trusted repo by drone admin)
        # NOTE need to put 172.20.254.254 in /etc/resolv.conf to avoid conflict with floating ips
        # NOTE mtu dynamically changes when containers are in network!!!
        # NOTE to do a full cleanup, even if interfaces missing, do a full restart
        # NOTE things like weave net have docs for this sort of complex stuff...docker docs are weak...
        # e.g. https://www.weave.works/docs/net/latest/tasks/manage/fastdp/#packet-size-mtu
        # would be nice if you could set a global default MTU - https://github.com/moby/moby/issues/34981#issuecomment-346379091
      pip_version_docker_compose: "{{docker_compose_version}}"
      docker_group_members: [ 'ubuntu' ]

      # Needed for installing cfssl via `go get`
    - role: ansible-go
      go_tarball: go1.10.3.linux-amd64.tar.gz
      go_tarball_checksum: sha256:fa1b0e45d3b647c252f51f5e1204aba049cde4af177ef9f2181f43004f901035
      go_version_target: "go version go1.10.3 linux/amd64"
      go_download_location: "https://dl.google.com/go/{{ go_tarball }}"
      # adds /etc/profile.d/{go-bin,go-path}.sh
      set_go_path: true

      # Needed for Gitea DB
    - role: geerlingguy.postgresql
      postgresql_user: postgres
      postgresql_group: postgres

  tasks:
    - name: install useful tools
      apt: name={{ item }}
      with_items:
        - curl
        - jq
        - htop
        - ncdu
        # https://serverfault.com/a/706494/312364
        - libpam-systemd
        - dbus
    - name: Lock docker version
      dpkg_selections:
        name: docker-ce
        selection: hold
    - name: Ensure /opt/bin exists
      file:
        path: /opt/bin
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Ensure /opt/src exists
      file:
        path: /opt/src
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Add /opt/bin to PATH
      copy:
        dest: /etc/profile.d/opt-bin.sh
        owner: root
        group: root
        mode: 0644
        content: |
          export PATH=$PATH:/opt/bin


    # === CFSSL ===
    - name: Install cfssl tools
      shell: "source /etc/profile && go get -u {{ item }}"
      args:
        # Use /bin/bash so we can call `source` instead of `.`, for readability
        executable: /bin/bash
      become: true
      become_user: root
      with_items:
        - github.com/cloudflare/cfssl/cmd/cfssl
        - github.com/cloudflare/cfssl/cmd/cfssljson
      changed_when: false
    - name: Ensure /etc/cfssl exists
      file:
        path: /etc/cfssl
        state: directory
        owner: root
        group: root
        mode: 0500
    - name: Copy Root CA certificate signing request configuration into /etc/cfssl
      copy:
        dest: /etc/cfssl/rootca-csr.json
        owner: root
        group: root
        mode: 0400
        content: |
          {
            "CN": "{{ rootca_csr_ca_common_name }}",
            "key": {
              "algo": "rsa",
              "size": 2048
            },
            "names": [
               {
                 "C": "{{ rootca_csr_country }}",
                 "L": "{{ rootca_csr_city }}",
                 "O": "{{ rootca_csr_organization }}",
                 "OU": "{{ rootca_csr_organization_unit }}",
                 "ST": "{{ rootca_csr_state }}"
               }
            ]
          }
    - name: Generate Root CA Key
      shell: "source /etc/profile && cfssl gencert -initca rootca-csr.json | cfssljson -bare ca"
      args:
        creates: /etc/cfssl/ca.pem
        chdir: /etc/cfssl
        executable: /bin/bash
    - name: Copy Root CA cert to local machine
      fetch:
        src: /etc/cfssl/ca.pem
        dest: cacerts

    # === ADD CA CERT TO SYSTEM ===
    - name: Ensure local certs directory exists
      file:
        path: /usr/local/share/ca-certificates/cfssl
        state: directory
    - name: Install self signed root CA cert
      copy:
        remote_src: yes
        src: /etc/cfssl/ca.pem
        dest: /usr/local/share/ca-certificates/cfssl/ca.crt
    - name: Update cert index
      shell: /usr/sbin/update-ca-certificates
      # only when previous task changed?


    # === /etc/hosts ===
    # It is too much trouble to add new entries into /etc/resolv.conf with
    # cloud init on ubuntu, it will default to only using what is provided via
    # OpenStack metadata service; and we cannot put "127.0.0.1" in the subnet's
    # DNS. So, manually add hosts entries for now.
    - name: "Add {{ item }}.{{ domain }}.{{ tld }} to /etc/hosts"
      lineinfile:
        path: /etc/hosts
        line: "{{ local_ipv4 }} {{ item }}.{{ domain }}.{{ tld }}"
        state: present
      with_items: "{{ services }}"

    # === NGINX ===
    - name: Install nginx
      apt: name=nginx
    - name: Ensure /etc/nginx/ssl exists
      file:
        path: /etc/nginx/ssl
        state: directory
        owner: root
        group: root
        mode: 0744
    - name: Copy website CSR
      copy:
        dest: /etc/nginx/ssl/web.json
        owner: root
        group: root
        mode: 0744
        content: |
          {
            "CN": "*.{{ domain }}.{{ tld }}",
            "hosts": [
                "{{ floating_ip }}",
                "*.{{ domain }}.{{ tld }}"
            ],
            "key": {
                "algo": "rsa",
                "size": 2048
            },
            "names": [
                {
                  "C": "{{ web_csr_country }}",
                  "L": "{{ web_csr_city }}",
                  "O": "{{ web_csr_organization }}",
                  "OU": "{{ web_csr_organization_unit }}",
                  "ST": "{{ web_csr_state }}"
                }
            ]
          }
      notify: generate_web_certs
    - name: Generate Web Certs
      shell: "source /etc/profile && cfssl gencert -ca=/etc/cfssl/ca.pem -ca-key=/etc/cfssl/ca-key.pem web.json | cfssljson -bare web"
      args:
        # creates: "{{ web_cert_path }}"
        chdir: /etc/nginx/ssl
        executable: /bin/bash
      notify: restart_nginx
    - name: Copy nginx configuration
      copy:
        dest: /etc/nginx/sites-available/default
        owner: root
        group: root
        mode: 0644
        content: |
          server {
                  listen 80;

                  location / {
                          return 301 https://$host$request_uri;
                  }
          }

          server {
                  listen 443 ssl;
                  listen [::]:443 ssl;

                  ssl_certificate {{ web_cert_path }};
                  ssl_certificate_key {{ web_tls_key_path }};

                  root /var/www/html;

                  index index.html index.htm index.nginx-debian.html;

                  server_name _;

                  location / {
                          # First attempt to serve request as file, then
                          # as directory, then fall back to displaying a 404.
                          try_files $uri $uri/ =404;
                  }
            }

    # === COREDNS ===
    - name: Download CoreDNS
      get_url:
        url: "https://github.com/coredns/coredns/releases/download/v{{ coredns_version }}/coredns_{{ coredns_version }}_linux_amd64.tgz"
        dest: "/opt/src/coredns_{{ coredns_version }}_linux_amd64.tgz"
    - name: Extract CoreDNS
      unarchive:
        remote_src: yes
        src: "/opt/src/coredns_{{ coredns_version }}_linux_amd64.tgz"
        dest: /opt/bin
    - name: CoreDNS user
      user:
        name: coredns
        home: /var/lib/coredns
        system: yes
    - name: Ensure /etc/coredns exists
      file:
        path: /etc/coredns
        state: directory
        owner: root
        group: coredns
        mode: 0775
    - name: CoreDNS Configuration
      copy:
        dest: /etc/coredns/Corefile
        owner: root
        group: coredns
        mode: 0664
        content: |
          . {
            whoami
            log
            errors

            forward . 8.8.8.8

            hosts bootstrap.hosts {{ domain }}.{{ tld }} {
              {% for service in services %}
              {{ floating_ip }} {{ service }}.{{ domain }}.{{ tld }}
              {% endfor %}
              fallthrough
            }
          }
      notify: reload_service_coredns
    - name: CoreDNS Systemd Service
      copy:
        dest: /etc/systemd/system/coredns.service
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=CoreDNS DNS server
          Documentation=https://coredns.io
          After=network.target

          [Service]
          PermissionsStartOnly=true
          LimitNOFILE=1048576
          LimitNPROC=512
          CapabilityBoundingSet=CAP_NET_BIND_SERVICE
          AmbientCapabilities=CAP_NET_BIND_SERVICE
          NoNewPrivileges=true
          User=coredns
          WorkingDirectory=~
          ExecStart=/opt/bin/coredns -conf=/etc/coredns/Corefile
          ExecReload=/bin/kill -SIGUSR1 $MAINPID
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
      notify: restart_service_coredns
    - name: Start coredns service
      service:
        daemon_reload: yes
        name: coredns
        state: started
        enabled: yes


    # === GITEA ===
    - name: Download Gitea binary
      # TODO verify with gpg
      get_url:
        url: https://dl.gitea.io/gitea/1.5/gitea-1.5-linux-amd64
        dest: /opt/bin/gitea
        owner: root
        group: root
        mode: 0755
    - name: Make a git user
      user:
        name: git
    - name: Create Gitea directories owned by root
      file:
        path: "/var/lib/gitea/{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      with_items:
        - custom
        - public
    - name: Create gitea directories owned by git
      file:
        path: /var/lib/gitea/{{ item }}
        state: directory
        owner: git
        group: git
        mode: 0750
      with_items:
        - data
        - indexers
        - log
    - name: Create /etc/gitea
      file:
        path: /etc/gitea
        state: directory
        owner: root
        group: git
        mode: 0770
    - name: Create gitea database
      become: yes
      become_user: postgres
      postgresql_db:
        name: gitea
    - name: Create gitea postgresql user
      become: yes
      become_user: postgres
      postgresql_user:
        db: gitea
        name: gitea
        password: "{{ gitea_postgres_password }}"
        priv: ALL
    - name: Ensure Postgres gitea user does not have unnecessary privilege
      become: yes
      become_user: postgres
      postgresql_user:
        name: gitea
        role_attr_flags: NOSUPERUSER,NOCREATEDB
    - name: Ensure no other user can access gitea database
      become: yes
      become_user: postgres
      postgresql_privs:
        db: gitea
        role: PUBLIC
        type: database
        priv: ALL
        state: absent
    - name: Create Gitea systemd unit
      copy:
        dest: /etc/systemd/system/gitea.service
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=Gitea (Git with a cup of tea)
          After=syslog.target
          After=network.target
          After=postgresql.service

          [Service]
          # Modify these two values and uncomment them if you have
          # repos with lots of files and get an HTTP error 500 because
          # of that
          ###
          #LimitMEMLOCK=infinity
          #LimitNOFILE=65535
          RestartSec=2s
          Type=simple
          User=git
          Group=git
          WorkingDirectory=/var/lib/gitea/
          ExecStart=/opt/bin/gitea web -c /etc/gitea/app.ini
          Restart=always
          Environment=USER=git HOME=/home/git GITEA_WORK_DIR=/var/lib/gitea
          # If you want to bind Gitea to a port below 1024 uncomment
          # the two values below
          ###
          #CapabilityBoundingSet=CAP_NET_BIND_SERVICE
          #AmbientCapabilities=CAP_NET_BIND_SERVICE

          [Install]
          WantedBy=multi-user.target
      notify: restart_service_gitea
    - name: Start Gitea service
      service:
        daemon_reload: yes
        name: gitea
        state: started
        enabled: yes
    - name: Copy Gitea nginx conf
      template:
        src: nginx-reverse-proxy.conf
        dest: /etc/nginx/conf.d/gitea.conf
        owner: root
        group: root
        mode: 0644
      vars:
        server_name: "git.{{ domain }}.{{ tld }}"
        port: "{{ gitea_port }}"
        ssl_certificate: "{{ web_cert_path }}"
        ssl_certificate_key: "{{ web_tls_key_path }}"
      notify: restart_nginx

    # === DRONE SERVER ===
    - name: Copy drone systemd unit
      copy:
        dest: /etc/systemd/system/drone-server.service
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=Drone Server
          After=docker.service
          Requires=docker.service

          [Service]
          RestartSec=2s
          TimeoutStartSec=0
          Type=simple
          User=root
          Group=root
          ExecStartPre=-/usr/bin/docker kill drone-server
          ExecStartPre=-/usr/bin/docker rm drone-server
          ExecStartPre=/usr/bin/docker pull drone/drone:{{ drone_version }}
          ExecStart=/usr/bin/docker run --name drone-server -p {{ drone_server_port }}:8000 -p {{ drone_server_grpc_port }}:9000 -v var_lib_drone:/var/lib/drone --restart always -e DRONE_DEBUG=true -e DRONE_OPEN=true -e DRONE_HOST=http://{{ local_ipv4 }}:{{ drone_server_port }} -e DRONE_SECRET={{ drone_secret }} -e DRONE_GITEA=true -e DRONE_GITEA_URL=http://{{ local_ipv4 }}:{{ gitea_port }} -e DRONE_ADMIN={{ drone_admin }} -e DRONE_VOLUME=/etc/ssl/certs:/etc/ssl/certs drone/drone:{{ drone_version }}
          Restart=always

          [Install]
          WantedBy=multi-user.target
      notify: restart_service_drone_server
    - name: Start Drone Server service
      service:
        daemon_reload: yes
        name: drone-server
        state: started
        enabled: yes
    - name: Copy Drone server nginx conf
      template:
        src: nginx-reverse-proxy.conf
        dest: /etc/nginx/conf.d/drone-server.conf
        owner: root
        group: root
        mode: 0644
      vars:
        server_name: drone.{{ domain }}.{{ tld }}
        port: "{{ drone_server_port }}"
        ssl_certificate: "{{ web_cert_path }}"
        ssl_certificate_key: "{{ web_tls_key_path }}"
      notify: restart_nginx

    # === DRONE AGENT ===
    - name: Copy drone-agent systemd unit
      copy:
        dest: /etc/systemd/system/drone-agent.service
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=Drone Agent
          After=docker.service
          Requires=docker.service
          After=drone-server.service
          Requires=drone-server.service

          [Service]
          RestartSec=2s
          TimeoutStartSec=0
          Type=simple
          User=root
          Group=root
          ExecStartPre=-/usr/bin/docker kill drone-agent
          ExecStartPre=-/usr/bin/docker rm drone-agent
          ExecStartPre=/usr/bin/docker pull drone/drone:{{ drone_version }}
          ExecStart=/usr/bin/docker run --name drone-agent -v /var/run/docker.sock:/var/run/docker.sock --restart always -e DRONE_DEBUG=true -e DRONE_SERVER={{ local_ipv4 }}:{{ drone_server_grpc_port }} -e DRONE_SECRET={{ drone_secret }} drone/agent:{{ drone_version }} agent
          Restart=always

          [Install]
          WantedBy=multi-user.target
    - name: Start Drone Agent service
      service:
        daemon_reload: yes
        name: drone-agent
        state: started
        enabled: yes

    # === MINIO ===
    - name: Download Minio server binary
      get_url:
        url: https://dl.minio.io/server/minio/release/linux-amd64/minio
        dest: /opt/bin/minio
        owner: root
        group: root
        mode: 0755
    - name: Download minio client binary
      get_url:
        url: https://dl.minio.io/client/mc/release/linux-amd64/mc
        dest: /opt/bin/mc
        owner: root
        group: root
        mode: 0755
    - name: Make a minio user
      user:
        name: minio
        system: yes
    - name: Ensure minio data folder exists
      file:
        path: /var/lib/minio
        state: directory
        owner: root
        group: minio
        mode: 0775
    - name: Create minio environment file
      copy:
        dest: /etc/default/minio
        owner: root
        group: minio
        mode: 0640
        content: |
          MINIO_ACCESS_KEY=admin
          MINIO_SECRET_KEY=password
          MINIO_VOLUMES=/var/lib/minio
          MINIO_OPTS="--address 127.0.0.1:{{ minio_port }}"
    - name: Copy minio systemd unit
      copy:
        dest: /etc/systemd/system/minio.service
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=Miniohttps://coreos.com/os/docs/latest/using-environment-variables-in-systemd-units.html
          Documentation=https://docs.minio.io
          Wants=network-online.target
          After=network-online.target
          AssertFileIsExecutable=/opt/bin/minio

          [Service]
          WorkingDirectory=/usr/local/

          User=minio
          Group=minio

          PermissionsStartOnly=true

          EnvironmentFile=-/etc/default/minio
          ExecStartPre=/bin/bash -c "[ -n \"${MINIO_VOLUMES}\" ] || echo \"Variable MINIO_VOLUMES not set in /etc/default/minio\""

          ExecStart=/opt/bin/minio server $MINIO_OPTS $MINIO_VOLUMES
          # ExecStart=/opt/bin/minio server --address 127.0.0.1:{{ minio_port }} /var/lib/minio

          # Let systemd restart this service only if it has ended with the clean exit code or signal.
          Restart=on-success

          StandardOutput=journal
          StandardError=inherit

          # Specifies the maximum file descriptor number that can be opened by this process
          LimitNOFILE=65536

          # Disable timeout logic and wait until process is stopped
          TimeoutStopSec=0

          # SIGTERM signal is used to stop Minio
          KillSignal=SIGTERM

          SendSIGKILL=no

          SuccessExitStatus=0

          [Install]
          WantedBy=multi-user.target
    - name: Start Minio service
      service:
        daemon_reload: yes
        name: minio
        state: started
        enabled: yes
    - name: Copy minio nginx conf
      template:
        src: nginx-reverse-proxy.conf
        dest: /etc/nginx/conf.d/minio.conf
        owner: root
        group: root
        mode: 0644
      vars:
        server_name: minio.{{ domain }}.{{ tld }}
        port: "{{ minio_port }}"
        ssl_certificate: "{{ web_cert_path }}"
        ssl_certificate_key: "{{ web_tls_key_path }}"


  post_tasks:
    - name: Ensure /var/lib/iptables exists
      file:
        path: /var/lib/iptables
        state: directory
        owner: root
        group: root
        mode: 0755
    - name: Create DOCKER-USER iptables-save file
      copy:
        dest: /var/lib/iptables/docker-user.save
        owner: root
        group: root
        mode: 0644
        content: |
          *filter
          :DOCKER-USER - [0:0]
          -A DOCKER-USER -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
          -A DOCKER-USER -j RETURN
          COMMIT
    - name: Create clamp-mss systemd unit
      copy:
        dest: /etc/systemd/system/clamp-mss.service
        owner: root
        group: root
        mode: 0644
        content: |
          [Unit]
          Description=Clamp MSS on DOCKER-USER chain
          After=docker.service
          Requires=docker.service

          [Service]
          Type=oneshot
          ExecStart=/sbin/iptables-restore -T filter --noflush /var/lib/iptables/docker-user.save

          [Install]
          WantedBy=basic.target
    - name: Start clamp-mss service
      service:
        daemon_reload: yes
        name: clamp-mss
        state: started
        enabled: yes
    - name: Restart Docker service
      service:
        daemon_reload: yes
        name: docker
        state: restarted
        enabled: yes
